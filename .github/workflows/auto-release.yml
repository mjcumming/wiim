# Enable automatic release workflow
name: Auto Release

on:
  push:
    branches:
      - main
    paths:
      - "custom_components/wiim/manifest.json"
  workflow_dispatch:
    inputs:
      reason:
        description: "Manual trigger reason"
        required: false
        type: string

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: version
        run: |
          VERSION=$(grep '"version"' custom_components/wiim/manifest.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Get previous version
        id: prev-version
        run: |
          git checkout HEAD~1
          PREV_VERSION=$(grep '"version"' custom_components/wiim/manifest.json | sed 's/.*"version": "\(.*\)".*/\1/' || echo "none")
          echo "prev-version=$PREV_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $PREV_VERSION"
          git checkout -

      - name: Check if version changed
        id: check
        run: |
          if [ "${{ steps.version.outputs.version }}" != "${{ steps.prev-version.outputs.prev-version }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from ${{ steps.prev-version.outputs.prev-version }} to ${{ steps.version.outputs.version }}"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if tag already exists
        id: tag-check
        run: |
          if git rev-parse "v${{ needs.check-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ needs.check-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ needs.check-version.outputs.version }} does not exist"
          fi

      - name: Check if release already exists
        id: release-check
        run: |
          if gh release view "v${{ needs.check-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ needs.check-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ needs.check-version.outputs.version }} does not exist"
          fi

      - name: Create ZIP file
        if: steps.tag-check.outputs.exists == 'false' && steps.release-check.outputs.exists == 'false'
        run: |
          mkdir -p release/custom_components
          cp -r custom_components/wiim release/custom_components/
          cp LICENSE README.md release/
          cd release
          zip -r ../wiim.zip . --exclude "*/__pycache__/*" --exclude "*.pyc"
          cd ..
          ls -la wiim.zip

      - name: Extract changelog for this version
        if: steps.tag-check.outputs.exists == 'false'
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            awk '/^## \['"${{ needs.check-version.outputs.version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
            if [ -s release_notes.md ]; then
              printf 'changelog<<EOF\n' >> $GITHUB_OUTPUT
              cat release_notes.md >> $GITHUB_OUTPUT
              printf 'EOF\n' >> $GITHUB_OUTPUT
            else
              echo "changelog=Release v${{ needs.check-version.outputs.version }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "changelog=Release v${{ needs.check-version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release with GitHub CLI
        if: steps.tag-check.outputs.exists == 'false' && steps.release-check.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NOTES: ${{ steps.changelog.outputs.changelog }}
        run: |
          gh release create "v${{ needs.check-version.outputs.version }}" \
            --title "WiiM Audio v${{ needs.check-version.outputs.version }}" \
            --notes "$RELEASE_NOTES" \
            --latest \
            wiim.zip

      - name: Success notification
        if: steps.tag-check.outputs.exists == 'false' && steps.release-check.outputs.exists == 'false'
        run: |
          echo "🎉 Successfully created release v${{ needs.check-version.outputs.version }}"
          echo "📦 ZIP file uploaded as wiim.zip"
          echo "🏠 HACS will detect this release within 24 hours"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-version.outputs.version }}"
